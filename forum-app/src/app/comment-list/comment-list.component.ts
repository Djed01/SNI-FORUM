import { Component, OnInit, Input } from '@angular/core';
import { CommentService } from '../services/comment.service';
import { UserService } from '../services/user.service';
import { Comment } from '../models/comment.model';
import { ActivatedRoute } from '@angular/router';
import { User } from '../models/user.model';

@Component({
  selector: 'app-comment-list',
  templateUrl: './comment-list.component.html',
  styleUrls: ['./comment-list.component.css'],
})
export class CommentListComponent implements OnInit {
  @Input() topicId: number = 0;
  comments: Comment[] = [];
  usernames: { [userId: number]: string } = {};
  newCommentContent: string = ''; 
  currentPage: number = 1;
  limit: number = 20;  // Number of comments per page
  totalComments: number = 0;
  currentTopicName: string = 'Loading...';

  constructor(
    private commentService: CommentService,
    private userService: UserService,
    private route: ActivatedRoute,
  ) {}

  ngOnInit() {
    this.route.params.subscribe(params => {
      const topicId = +params['topicId']; // '+' converts the string 'topicId' to a number
      if (topicId) {
       // this.loadHardcodedComments();
        this.loadComments(topicId);
        this.currentTopicName = this.getTopicName(topicId);
      }
    });
  }

  loadComments(topicId: number) {
    this.commentService.getCommentsByTopic(topicId).subscribe(
      (comments: Comment[]) => {
        this.comments = comments; // Assign the fetched comments
        this.totalComments = comments.length;
        this.loadUsernames();
      },
      error => {
        // Handle any errors here
        console.error('There was an error fetching comments:', error);
      }
    );
  }

  loadUsernames() {
    this.comments.forEach(comment => {
      this.userService.getUserById(comment.userId).subscribe(
        (user: User) => {
          this.usernames[comment.userId] = user.username; // Assuming 'username' is a property of the User model
        }
      );
    });
  }

  postComment() {
    if (this.newCommentContent.trim()) {
      const newComment: Comment = {
        // Assuming your Comment model requires these fields
        id: 0, // The ID might be generated by the backend
        topicId: this.topicId,
        userId: 1, // Replace with the actual user's ID
        content: this.newCommentContent,
        time: new Date(),
        status: true,
      };
  
      // Call the service to post the new comment
      this.commentService.postComment(newComment).subscribe(
        response => {
          // Handle response here
          console.log('Comment posted successfully', response);
          this.comments.push(newComment); // Add the new comment to the list
          this.newCommentContent = ''; // Clear the input field
        },
        error => {
          // Handle error here
          console.error('There was an error posting the comment:', error);
        }
      );
    }
  }

  changePage(newPage: number) {
    this.currentPage = newPage;
    this.loadComments(this.topicId); // Reload comments for the new page
  }

  getTopicName(topicId: number): string {
    switch (topicId) {
      case 1: return 'Science';
      case 2: return 'Culture';
      case 3: return 'Sport';
      case 4: return 'Music';
      default: return 'Unknown'; // Default case for unknown topicId
    }
  }
}
